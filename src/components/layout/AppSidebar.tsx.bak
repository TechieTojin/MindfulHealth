import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import { 
  Brain, Calendar, Dumbbell, Home, LineChart, MessageSquare, Mic, Settings, 
  Video, Heart, LogOut, ChevronRight, PlayCircle, Utensils, Apple, Award, 
  Database, Lock, Shield, Info, User, LogIn, BarChart3, Bell, ChevronDown,
  Activity, Trophy, LayoutDashboard, BarChart
} from "lucide-react";
import { Link, useLocation } from "react-router-dom";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useAuth } from "@/contexts/AuthContext";
import { useState, useEffect } from "react";
import { Badge } from "@/components/ui/badge";
import { motion, AnimatePresence } from "framer-motion";

const menuItems = [
  {
    title: "Dashboard",
    icon: Home,
    path: "/dashboard",
  },
  {
    title: "Analytics",
    icon: LineChart,
    path: "/analytics",
  },
  {
    title: "Workouts",
    icon: Dumbbell,
    path: "/workouts",
  },
  {
    title: "Fitness Progress",
    icon: BarChart3,
    path: "/fitness-progress",
    badge: "New"
  },
  {
    title: "Mental Wellness",
    icon: Brain,
    path: "/mental-wellness",
  },
  {
    title: "Calendar",
    icon: Calendar,
    path: "/calendar",
  },
  {
    title: "Live Workout",
    icon: PlayCircle,
    path: "/live-workout",
    badge: "Live",
    realtime: true
  },
];

const mealItems = [
  {
    title: "Food Scanner",
    icon: Utensils,
    path: "/food-scanner",
    badge: "New",
  },
  {
    title: "Meal Planner",
    icon: Apple,
    path: "/meal",
  },
  {
    title: "Weekly Meals",
    icon: Calendar,
    path: "/meal-planner",
  },
];

const progressItems = [
  {
    title: "Achievements",
    icon: Award,
    path: "/achievements",
    badge: "3",
    count: 3,
  },
  {
    title: "Health Report",
    icon: Activity,
    path: "/health-report",
    badge: "New",
  },
  {
    title: "Data Vault",
    icon: Shield,
    path: "/data-vault",
    badge: "Sync",
    realtime: true
  },
];

const inputItems = [
  {
    title: "Voice Assistant",
    icon: Mic,
    path: "/ai-voice-assistant",
    badge: "AI",
  },
  {
    title: "Video Analysis",
    icon: Video,
    path: "/ai-video-analysis",
    badge: "AI",
  },
  {
    title: "Chat Coach",
    icon: MessageSquare,
    path: "/chat",
    badge: "2",
    count: 2,
  },
];

// Public navigation items for non-authenticated users
const publicItems = [
  {
    title: "About Us",
    icon: Info,
    path: "/about",
  },
  {
    title: "Features",
    icon: Award,
    path: "/#features",
  },
  {
    title: "Pricing",
    icon: Database,
    path: "/#pricing",
  },
];

const ActiveUserIndicator = () => (
  <span className="relative flex h-3 w-3 ml-auto">
    <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span>
    <span className="relative inline-flex rounded-full h-3 w-3 bg-green-500"></span>
  </span>
);

const AppSidebar = () => {
  const location = useLocation();
  const { user, logout, isAuthenticated } = useAuth();
  
  // Add loading state
  const [isLoading, setIsLoading] = useState(true);
  
  // State for collapsible sections
  const [expandedSections, setExpandedSections] = useState({
    meals: true,
    progress: true,
    ai: true
  });
  
  // State for real-time counters and indicators
  const [liveUsers, setLiveUsers] = useState(24);
  const [notifications, setNotifications] = useState(3);
  const [syncProgress, setSyncProgress] = useState(0);
  const [isSync, setIsSync] = useState(false);
  const [connectionProgress, setConnectionProgress] = useState(0);

  // Function to toggle section expansion
  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };
  
  // Show loading state for 6 seconds
  useEffect(() => {
    const loadingTimer = setTimeout(() => {
      setIsLoading(false);
    }, 6000);
    
    // Update connection progress every 200ms
    const progressInterval = setInterval(() => {
      setConnectionProgress(prev => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          return 100;
        }
        return prev + 3.3; // Roughly reach 100 in 6 seconds
      });
    }, 200);
    
    return () => {
      clearTimeout(loadingTimer);
      clearInterval(progressInterval);
    };
  }, []);
  
  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      // Randomly update live users count
      setLiveUsers(prev => {
        const change = Math.floor(Math.random() * 3) - 1; // -1, 0, or 1
        return Math.max(15, prev + change);
      });

      // Random chance to increment notifications
      if (Math.random() < 0.1) {
        setNotifications(prev => prev + 1);
      }
    }, 5000);

    // Simulate data sync
    const syncInterval = setInterval(() => {
      if (!isSync && Math.random() < 0.2) {
        setIsSync(true);
        const progressInterval = setInterval(() => {
          setSyncProgress(prev => {
            if (prev >= 100) {
              clearInterval(progressInterval);
              setTimeout(() => {
                setIsSync(false);
                setSyncProgress(0);
              }, 1000);
              return 100;
            }
            return prev + 10;
          });
        }, 300);
      }
    }, 10000);

    return () => {
      clearInterval(interval);
      clearInterval(syncInterval);
    };
  }, [isSync]);
  
  const isActive = (path: string) => {
    return location.pathname === path;
  };

  // Render menu items with animations
  const renderMenuItems = (items, activeIndication = false) => {
    return items.map((item) => (
      <SidebarMenuItem key={item.title}>
        <SidebarMenuButton asChild isActive={isActive(item.path)}>
          <Link to={item.path} className={cn(
            "group flex items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-all relative overflow-hidden",
            isActive(item.path) ? 
              "bg-gradient-to-r from-health-primary/20 to-health-primary/5 text-health-primary shadow-sm" : 
              "text-muted-foreground hover:bg-muted/80 hover:text-foreground"
          )}>
            {/* Hover background effect */}
            {!isActive(item.path) && (
              <div className="absolute inset-0 w-0 bg-gradient-to-r from-health-primary/10 to-transparent group-hover:w-full transition-all duration-300 ease-out -z-10"></div>
            )}
            
            {/* Icon with pulse effect for realtime items */}
            <div className={cn(
              "relative",
              item.realtime && !isActive(item.path) && "group-hover:animate-pulse"
            )}>
              <item.icon className={cn(
                "h-5 w-5 transition-colors duration-300",
                isActive(item.path) ? "text-health-primary" : "text-muted-foreground group-hover:text-foreground"
              )} />
            </div>
            
            <span className="truncate">{item.title}</span>
            
            {/* Active indicator */}
            {isActive(item.path) && (
              <motion.div 
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="ml-auto h-2 w-2 rounded-full bg-health-primary"
              ></motion.div>
            )}
            
            {/* Badge or counter */}
            {item.badge && !isActive(item.path) && (
              <span className={cn(
                "ml-auto inline-flex h-5 items-center justify-center rounded-full px-2 text-xs font-medium ring-1 ring-inset",
                item.badge === 'New' 
                  ? "bg-health-accent/10 text-health-accent ring-health-accent/20" 
                  : item.badge === 'Live'
                    ? "bg-green-500/10 text-green-500 ring-green-500/20"
                    : item.badge === 'AI'
                      ? "bg-purple-500/10 text-purple-500 ring-purple-500/20"
                      : item.badge === 'Sync'
                        ? "bg-blue-500/10 text-blue-500 ring-blue-500/20"
                        : "bg-health-primary/10 text-health-primary ring-health-primary/20"
              )}>
                {item.title === "Live Workout" && isActive(item.path)
                  ? `${liveUsers} online`
                  : item.badge === 'Sync' && isSync
                    ? `${syncProgress}%`
                    : item.badge}
              </span>
            )}
            
            {/* Online user indicator for active items */}
            {activeIndication && item.count && !isActive(item.path) && (
              <ActiveUserIndicator />
            )}
          </Link>
        </SidebarMenuButton>
      </SidebarMenuItem>
    ));
  };

  return (
    <Sidebar className="border-r bg-sidebar dark:bg-sidebar/95 backdrop-blur-sm">
      {isLoading ? (
        <div className="flex flex-col items-center justify-center h-full p-6">
          <div className="w-16 h-16 mb-4 relative">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="text-blue-600 animate-pulse">
              <path d="M12 2L4 6V18L12 22L20 18V6L12 2Z" fill="currentColor" fillOpacity="0.2" stroke="currentColor" strokeWidth="2"/>
              <path d="M12 6L12 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" className="animate-ping"/>
              <path d="M17 8.5L7 14.5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
              <path d="M7 8.5L17 14.5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="h-10 w-10 rounded-full border-2 border-blue-500 border-t-transparent animate-spin"></div>
            </div>
          </div>
          <h3 className="text-lg font-semibold mb-2 text-blue-700 dark:text-blue-500">Connecting to Fluvio Server</h3>
          <div className="w-full max-w-xs mb-3">
            <div className="h-2 w-full bg-blue-100 dark:bg-blue-900/30 rounded-full overflow-hidden">
              <div 
                className="h-full bg-blue-600 transition-all duration-300 ease-out"
                style={{ width: `${connectionProgress}%` }}
              />
            </div>
          </div>
          <div className="text-sm text-muted-foreground flex items-center gap-2">
            <div className="flex space-x-1">
              <div className="h-2 w-2 rounded-full bg-blue-500 animate-pulse"></div>
              <div className="h-2 w-2 rounded-full bg-blue-500 animate-pulse delay-100"></div>
              <div className="h-2 w-2 rounded-full bg-blue-500 animate-pulse delay-200"></div>
            </div>
            <span>Initializing navigation services...</span>
          </div>
          <div className="mt-6 text-xs text-muted-foreground text-center">
            <div className="mb-1">FLUVIO NAVIGATION FRAMEWORK</div>
            <div>Secure Connection • Enterprise License</div>
          </div>
        </div>
      ) : (
        <>
          <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white px-3 py-2 text-xs font-medium shadow-sm">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-1.5">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 2L4 6V18L12 22L20 18V6L12 2Z" fill="currentColor" fillOpacity="0.2" stroke="currentColor" strokeWidth="2"/>
                  <path d="M12 6L12 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                  <path d="M17 8.5L7 14.5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                  <path d="M7 8.5L17 14.5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                </svg>
                <span className="font-semibold">FLUVIO NAVIGATION</span>
              </div>
              <span className="text-[10px] opacity-80">v2.4.1</span>
            </div>
            <div className="flex justify-between mt-1 text-[10px] opacity-80">
              <span>High Performance • Enterprise Grade</span>
              <span>© Fluvio 2023</span>
            </div>
          </div>
          <SidebarHeader className="px-6 py-5 mb-2">
            <Link to="/" className="flex items-center gap-2 text-xl font-bold">
              <div className="relative">
                <div className="absolute -inset-0.5 bg-gradient-to-r from-health-primary to-health-accent rounded-lg blur opacity-60 group-hover:opacity-100 animate-pulse"></div>
                <div className="relative flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-r from-health-primary to-health-accent text-white">
                  <Heart className="h-4 w-4" />
                </div>
              </div>
              <span>MindfulHealth</span>
              {notifications > 0 && (
                <Badge variant="outline" className="h-5 ml-auto bg-red-500/10 text-red-500 hover:bg-red-500/20">
                  {notifications} new
                </Badge>
              )}
            </Link>
          </SidebarHeader>
          
          <SidebarContent className="px-4 py-2 scrollbar-thin scrollbar-thumb-muted scrollbar-track-transparent fluvio-animated-content">
            <SidebarTrigger className="absolute right-2 top-4 sm:right-5 fluvio-trigger" />
            
            {isAuthenticated && (
              <motion.div 
                initial={{ y: 20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.3 }}
                className="mb-6 px-2"
              >
                <Link to="/profile-settings">
                  <div className="flex items-center gap-3 px-2 py-3 rounded-xl hover:bg-muted/50 transition-all cursor-pointer border border-transparent hover:border-border/50 group">
                    <div className="relative">
                      <Avatar className="h-10 w-10 border-2 border-health-primary/20 ring-2 ring-transparent group-hover:ring-health-primary/20 transition-all">
                        <AvatarImage src="https://t4.ftcdn.net/jpg/00/87/28/19/360_F_87281963_29bnkFXa6RQnJYWeRfrSpieagNxw1Rru.jpg" alt={user?.name || "User"} />
                        <AvatarFallback>{user?.name?.substring(0, 2) || "MH"}</AvatarFallback>
                      </Avatar>
                      <span className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-background flex items-center justify-center">
                        <span className="sr-only">Online</span>
                      </span>
                    </div>
                    <div className="flex-1 overflow-hidden">
                      <p className="text-sm font-medium text-foreground truncate">{user?.name || "Sarah Johnson"}</p>
                      <p className="text-xs text-muted-foreground truncate flex items-center gap-1">
                        <span className="w-1.5 h-1.5 rounded-full bg-green-500"></span>
                        Online
                      </p>
                    </div>
                    <Button variant="ghost" size="sm" className="h-7 w-7 p-0 opacity-0 group-hover:opacity-100 transition-opacity">
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                </Link>
              </motion.div>
            )}
            
            {isAuthenticated ? (
              <>
            <SidebarGroup>
                  <SidebarGroupLabel className="text-xs font-semibold text-muted-foreground px-1">
                    Main Navigation
                  </SidebarGroupLabel>
                  <SidebarGroupContent>
                    <SidebarMenu className="px-1 space-y-1">
                      {renderMenuItems(menuItems)}
                    </SidebarMenu>
                  </SidebarGroupContent>
                </SidebarGroup>
                
                <SidebarGroup className="mt-4">
                  <SidebarGroupLabel 
                    className="text-xs font-semibold text-muted-foreground flex items-center justify-between px-1 cursor-pointer"
                    onClick={() => toggleSection('meals')}
                  >
                    <span>Nutrition</span>
                    <ChevronDown 
                      className={cn(
                        "h-4 w-4 transition-transform", 
                        expandedSections.meals ? "transform rotate-0" : "transform rotate-180"
                      )} 
                    />
                  </SidebarGroupLabel>
                  <AnimatePresence>
                    {expandedSections.meals && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.2 }}
                      >
                        <SidebarGroupContent>
                          <SidebarMenu className="px-1 space-y-1">
                            {renderMenuItems(mealItems)}
                          </SidebarMenu>
                        </SidebarGroupContent>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </SidebarGroup>
                
                <SidebarGroup className="mt-4">
                  <SidebarGroupLabel 
                    className="text-xs font-semibold text-muted-foreground flex items-center justify-between px-1 cursor-pointer"
                    onClick={() => toggleSection('progress')}
                  >
                    <span>Progress Tracking</span>
                    <ChevronDown 
                      className={cn(
                        "h-4 w-4 transition-transform", 
                        expandedSections.progress ? "transform rotate-0" : "transform rotate-180"
                      )} 
                    />
                  </SidebarGroupLabel>
                  <AnimatePresence>
                    {expandedSections.progress && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.2 }}
                      >
                        <SidebarGroupContent>
                          <SidebarMenu className="px-1 space-y-1">
                            {renderMenuItems(progressItems, true)}
                          </SidebarMenu>
                        </SidebarGroupContent>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </SidebarGroup>
                
                <SidebarGroup className="mt-4">
                  <SidebarGroupLabel 
                    className="text-xs font-semibold text-muted-foreground flex items-center justify-between px-1 cursor-pointer"
                    onClick={() => toggleSection('ai')}
                  >
                    <span>AI Coach</span>
                    <ChevronDown 
                      className={cn(
                        "h-4 w-4 transition-transform", 
                        expandedSections.ai ? "transform rotate-0" : "transform rotate-180"
                      )} 
                    />
                  </SidebarGroupLabel>
                  <AnimatePresence>
                    {expandedSections.ai && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.2 }}
                      >
                        <SidebarGroupContent>
                          <SidebarMenu className="px-1 space-y-1">
                            {renderMenuItems(inputItems, true)}
                          </SidebarMenu>
                        </SidebarGroupContent>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </SidebarGroup>
                
                <div className="mt-auto px-4 py-4">
                  <motion.div 
                    className="rounded-xl bg-gradient-to-r from-health-primary/5 via-health-primary/10 to-health-accent/5 p-4 mt-6 border border-health-primary/10 shadow-sm"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.2 }}
                  >
                    <div className="flex items-center gap-3 mb-3">
                      <div className="h-8 w-8 rounded-full bg-gradient-to-r from-health-primary to-health-accent flex items-center justify-center">
                        <Activity className="h-4 w-4 text-white" />
                      </div>
                      <div>
                        <h4 className="text-sm font-medium">Health Score</h4>
                        <p className="text-xs text-muted-foreground">Very Good</p>
                      </div>
                    </div>
                    <div className="h-2 w-full bg-background/50 rounded-full overflow-hidden">
                      <motion.div 
                        className="h-full bg-gradient-to-r from-health-primary to-health-accent"
                        initial={{ width: 0 }}
                        animate={{ width: "78%" }}
                        transition={{ delay: 0.3, duration: 1, ease: "easeOut" }}
                      ></motion.div>
                    </div>
                    <div className="mt-2 text-xs text-right text-muted-foreground">78/100</div>
                  </motion.div>
                </div>
                
                <SidebarGroup className="mt-4">
              <SidebarGroupContent>
                    <SidebarMenu className="px-1 space-y-1">
                      <SidebarMenuItem>
                        <SidebarMenuButton asChild isActive={isActive("/profile-settings")}>
                          <Link to="/profile-settings" className={cn(
                              "group flex items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-all relative overflow-hidden",
                              isActive("/profile-settings") ? 
                                "bg-gradient-to-r from-health-primary/20 to-health-primary/5 text-health-primary shadow-sm" : 
                                "text-muted-foreground hover:bg-muted/80 hover:text-foreground"
                          )}>
                              {!isActive("/profile-settings") && (
                                <div className="absolute inset-0 w-0 bg-gradient-to-r from-health-primary/10 to-transparent group-hover:w-full transition-all duration-300 ease-out -z-10"></div>
                              )}
                              <User className={cn(
                                "h-5 w-5 transition-colors duration-300",
                                isActive("/profile-settings") ? "text-health-primary" : "text-muted-foreground group-hover:text-foreground"
                              )} />
                              <span>Profile Settings</span>
                          </Link>
                        </SidebarMenuButton>
                      </SidebarMenuItem>
                      
                      <SidebarMenuItem>
                        <SidebarMenuButton asChild isActive={isActive("/about")}>
                          <Link to="/about" className={cn(
                              "group flex items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-all relative overflow-hidden",
                              isActive("/about") ? 
                                "bg-gradient-to-r from-health-primary/20 to-health-primary/5 text-health-primary shadow-sm" : 
                                "text-muted-foreground hover:bg-muted/80 hover:text-foreground"
                          )}>
                              {!isActive("/about") && (
                                <div className="absolute inset-0 w-0 bg-gradient-to-r from-health-primary/10 to-transparent group-hover:w-full transition-all duration-300 ease-out -z-10"></div>
                              )}
                              <Info className={cn(
                                "h-5 w-5 transition-colors duration-300",
                                isActive("/about") ? "text-health-primary" : "text-muted-foreground group-hover:text-foreground"
                              )} />
                              <span>About Us</span>
                          </Link>
                        </SidebarMenuButton>
                      </SidebarMenuItem>
                      
                      <SidebarMenuItem>
                        <SidebarMenuButton asChild isActive={isActive("/settings")}>
                          <Link to="/settings" className={cn(
                              "group flex items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-all relative overflow-hidden",
                              isActive("/settings") ? 
                                "bg-gradient-to-r from-health-primary/20 to-health-primary/5 text-health-primary shadow-sm" : 
                                "text-muted-foreground hover:bg-muted/80 hover:text-foreground"
                          )}>
                              {!isActive("/settings") && (
                                <div className="absolute inset-0 w-0 bg-gradient-to-r from-health-primary/10 to-transparent group-hover:w-full transition-all duration-300 ease-out -z-10"></div>
                              )}
                              <Settings className={cn(
                                "h-5 w-5 transition-colors duration-300",
                                isActive("/settings") ? "text-health-primary" : "text-muted-foreground group-hover:text-foreground"
                              )} />
                              <span>Settings</span>
                          </Link>
                        </SidebarMenuButton>
                      </SidebarMenuItem>
                    </SidebarMenuItem>
                      
                      <SidebarMenuItem>
                        <SidebarMenuButton asChild>
                          <button
                            onClick={logout}
                            className="w-full group flex items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium text-muted-foreground hover:bg-destructive/10 hover:text-destructive transition-all relative overflow-hidden"
                          >
                            <div className="absolute inset-0 w-0 bg-gradient-to-r from-destructive/10 to-transparent group-hover:w-full transition-all duration-300 ease-out -z-10"></div>
                            <LogOut className="h-5 w-5 text-muted-foreground group-hover:text-destructive transition-colors duration-300" />
                            <span>Log out</span>
                          </button>
                        </SidebarMenuButton>
                      </SidebarMenuItem>
                </SidebarMenu>
              </SidebarGroupContent>
            </SidebarGroup>
              </>
            ) : (
              // Non-authenticated UI
              <>
                <div className="mb-6 px-3 py-3 bg-blue-600/10 rounded-md border border-blue-500/20">
                  <div className="flex items-center gap-2 mb-2">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="text-blue-600">
                      <path d="M12 2L4 6V18L12 22L20 18V6L12 2Z" fill="currentColor" fillOpacity="0.2" stroke="currentColor" strokeWidth="2"/>
                      <path d="M12 6L12 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                      <path d="M17 8.5L7 14.5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                      <path d="M7 8.5L17 14.5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                    </svg>
                    <span className="font-medium text-sm text-blue-700 dark:text-blue-400">Fluvio Modules</span>
                  </div>
                  <div className="grid grid-cols-2 gap-2 mb-2">
                    {["Navigation", "Auth", "Layout", "Effects"].map((module) => (
                      <div key={module} className="px-2 py-1.5 text-xs bg-white/50 dark:bg-blue-950/30 rounded border border-blue-200 dark:border-blue-800 text-blue-800 dark:text-blue-300">
                        {module}
                      </div>
                    ))}
                  </div>
                  <div className="text-xs text-muted-foreground">
                    <span className="inline-block px-1.5 py-0.5 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded text-[10px] mr-1">PRO</span>
                    Enterprise features enabled
                  </div>
                </div>
                
                <SidebarGroup className="mt-4">
                  <SidebarGroupLabel className="text-xs font-semibold text-muted-foreground px-1">About</SidebarGroupLabel>
                  <SidebarGroupContent>
                    <SidebarMenu className="px-1 space-y-1">
                      {publicItems.map((item) => (
                        <SidebarMenuItem key={item.title}>
                          <SidebarMenuButton asChild isActive={isActive(item.path)}>
                            <Link to={item.path} className={cn(
                              "group flex items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-all relative overflow-hidden",
                              isActive(item.path) ? 
                                "bg-gradient-to-r from-health-primary/20 to-health-primary/5 text-health-primary shadow-sm" : 
                                "text-muted-foreground hover:bg-muted/80 hover:text-foreground"
                            )}>
                              {!isActive(item.path) && (
                                <div className="absolute inset-0 w-0 bg-gradient-to-r from-health-primary/10 to-transparent group-hover:w-full transition-all duration-300 ease-out -z-10"></div>
                              )}
                              <item.icon className={cn(
                                "h-5 w-5 transition-colors duration-300",
                                isActive(item.path) ? "text-health-primary" : "text-muted-foreground group-hover:text-foreground"
                              )} />
                              <span>{item.title}</span>
                              {isActive(item.path) && (
                                <motion.div 
                                  initial={{ scale: 0 }}
                                  animate={{ scale: 1 }}
                                  className="ml-auto h-2 w-2 rounded-full bg-health-primary"
                                ></motion.div>
                              )}
                            </Link>
                          </SidebarMenuButton>
                        </SidebarMenuItem>
                      ))}
                    </SidebarMenu>
                  </SidebarGroupContent>
                </SidebarGroup>
              
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.2 }}
                    className="mt-auto"
                  >
                    <div className="px-4 py-6">
                      <div className="rounded-xl border border-health-primary/20 bg-card/50 p-4 relative overflow-hidden group">
                        <div className="absolute inset-0 bg-gradient-to-r from-health-primary/5 to-health-accent/5 opacity-0 group-hover:opacity-100 transition-opacity"></div>
                        <h3 className="font-medium text-sm mb-2">Join MindfulHealth</h3>
                        <p className="text-xs text-muted-foreground mb-4">Sign up to access all features and get personalized health recommendations.</p>
                        <div className="flex flex-col space-y-2">
                          <Button asChild size="sm" className="w-full bg-gradient-to-r from-health-primary to-health-accent hover:opacity-90 transition-opacity">
                            <Link to="/register">Sign Up</Link>
                          </Button>
                          <Button asChild variant="outline" size="sm" className="w-full border-health-primary/20 hover:border-health-primary/40 transition-colors">
                            <Link to="/login" className="flex items-center justify-center gap-1">
                              <LogIn className="h-4 w-4 mr-1" />
                              Log In
                        </Link>
                          </Button>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                </>
              )}
              
              {/* Fluvio watermark */}
              <div className="mt-auto py-4 opacity-30 hover:opacity-70 transition-opacity text-center text-xs text-muted-foreground">
                <div className="flex justify-center mb-1">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2L4 6V18L12 22L20 18V6L12 2Z" fill="currentColor" fillOpacity="0.2" stroke="currentColor" strokeWidth="2"/>
                    <path d="M12 6L12 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                    <path d="M17 8.5L7 14.5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                    <path d="M7 8.5L17 14.5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                  </svg>
                </div>
                <div>Powered by Fluvio™ Navigation Framework</div>
              </div>
          </SidebarContent>
        </>
      )}
    </Sidebar>
  );
};

// Add the Fluvio-specific styling
const style = document.createElement('style');
style.innerHTML = `
  .fluvio-animated-content {
    transition: transform 0.35s cubic-bezier(0.33, 1, 0.68, 1);
  }
  
  .fluvio-trigger:hover::before {
    content: 'Fluvio';
    position: absolute;
    font-size: 10px;
    background: rgba(0,0,0,0.7);
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    right: 100%;
    top: 50%;
    transform: translateY(-50%);
    margin-right: 8px;
  }
`;
document.head.appendChild(style);

export default AppSidebar;
